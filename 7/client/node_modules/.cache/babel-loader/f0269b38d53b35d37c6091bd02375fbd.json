{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\\\u041F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435\\\\node\\\\7\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\\\u041F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435\\\\node\\\\7\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\\\u041F\\u0440\\u043E\\u0433\\u0440\\u0430\\u043C\\u043C\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435\\\\node\\\\7\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport axios from 'axios';\nimport { call, put, takeEvery, all, select } from 'redux-saga/effects';\nimport { accessTokenSelector } from '../../ducks/auth';\nimport { apiUrl as baseURL } from '../../config';\n\nvar Api = function Api() {\n  _classCallCheck(this, Api);\n};\n\nApi.Get = function (url, data, options) {\n  return Api.Request(url, 'GET', data, options);\n};\n\nApi.Post = function (url, data, options) {\n  return Api.Request(url, 'POST', data, options);\n};\n\nApi.Request = function (url, method, data, config) {\n  config = config || {};\n  return new Promise(\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(resolve, reject) {\n      var _ref2, result;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axios({\n                method: method,\n                baseURL: baseURL,\n                url: url,\n                data: data,\n                headers: coconfig.headers\n              });\n\n            case 3:\n              _ref2 = _context.sent;\n              result = _ref2.data;\n              resolve(result);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              resolve({\n                error: _context.t0\n              });\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\n\nApi.GetSaga =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee2(url, data, needAuthorization) {\n  var config, token;\n  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          debugger;\n          config = {};\n\n          if (!needAuthorization) {\n            _context2.next = 8;\n            break;\n          }\n\n          _context2.next = 5;\n          return select(accessTokenSelector);\n\n        case 5:\n          token = _context2.sent;\n\n          if (!config.headers) {\n            config.headers = {};\n          }\n\n          config.headers.authorization = token;\n\n        case 8:\n          _context2.next = 10;\n          return call(Api.Get, url, data, config);\n\n        case 10:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _callee2);\n});\nexport { Api as default };","map":{"version":3,"sources":["C:/Программирование/node/7/client/src/helpers/api/index.js"],"names":["axios","call","put","takeEvery","all","select","accessTokenSelector","apiUrl","baseURL","Api","Get","url","data","options","Request","Post","method","config","Promise","resolve","reject","headers","coconfig","result","error","GetSaga","needAuthorization","token","authorization"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,GAA/B,EAAoCC,MAApC,QAAkD,oBAAlD;AAEA,SAASC,mBAAT,QAAoC,kBAApC;AACA,SAASC,MAAM,IAAIC,OAAnB,QAAkC,cAAlC;;IAEqBC,G;;;;AAAAA,G,CAEVC,G,GAAM,UAACC,GAAD,EAAMC,IAAN,EAAYC,OAAZ,EAAwB;AACjC,SAAOJ,GAAG,CAACK,OAAJ,CAAYH,GAAZ,EAAiB,KAAjB,EAAwBC,IAAxB,EAA8BC,OAA9B,CAAP;AACH,C;;AAJgBJ,G,CAMVM,I,GAAO,UAACJ,GAAD,EAAMC,IAAN,EAAYC,OAAZ,EAAwB;AAClC,SAAOJ,GAAG,CAACK,OAAJ,CAAYH,GAAZ,EAAiB,MAAjB,EAAyBC,IAAzB,EAA+BC,OAA/B,CAAP;AACH,C;;AARgBJ,G,CAUVK,O,GAAU,UAACH,GAAD,EAAMK,MAAN,EAAcJ,IAAd,EAAoBK,MAApB,EAA+B;AAE5CA,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AAEA,SAAO,IAAIC,OAAJ;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIoBpB,KAAK,CAAC;AAAEgB,gBAAAA,MAAM,EAANA,MAAF;AAAUR,gBAAAA,OAAO,EAAPA,OAAV;AAAmBG,gBAAAA,GAAG,EAAHA,GAAnB;AAAwBC,gBAAAA,IAAI,EAAJA,IAAxB;AAA8BS,gBAAAA,OAAO,EAAEC,QAAQ,CAACD;AAAhD,eAAD,CAJzB;;AAAA;AAAA;AAIGE,cAAAA,MAJH,SAIHX,IAJG;AAMXO,cAAAA,OAAO,CAACI,MAAD,CAAP;AANW;AAAA;;AAAA;AAAA;AAAA;AASXJ,cAAAA,OAAO,CAAC;AAACK,gBAAAA,KAAK;AAAN,eAAD,CAAP;;AATW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,MAAP;AAYH,C;;AA1BgBf,G,CA4BVgB,O;;yBAAU,kBAAWd,GAAX,EAAgBC,IAAhB,EAAsBc,iBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AACb;AACIT,UAAAA,MAFS,GAEA,EAFA;;AAAA,eAIVS,iBAJU;AAAA;AAAA;AAAA;;AAAA;AAKK,iBAAMrB,MAAM,CAACC,mBAAD,CAAZ;;AALL;AAKHqB,UAAAA,KALG;;AAOT,cAAG,CAACV,MAAM,CAACI,OAAX,EAAoB;AAChBJ,YAAAA,MAAM,CAACI,OAAP,GAAiB,EAAjB;AACH;;AAEDJ,UAAAA,MAAM,CAACI,OAAP,CAAeO,aAAf,GAA+BD,KAA/B;;AAXS;AAAA;AAcN,iBAAM1B,IAAI,CAACQ,GAAG,CAACC,GAAL,EAAUC,GAAV,EAAeC,IAAf,EAAqBK,MAArB,CAAV;;AAdM;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C;SA5BAR,G","sourcesContent":["import axios from 'axios'\r\nimport { call, put, takeEvery, all, select } from 'redux-saga/effects'\r\n\r\nimport { accessTokenSelector } from '../../ducks/auth'\r\nimport { apiUrl as baseURL } from '../../config'\r\n\r\nexport default class Api {\r\n\r\n    static Get = (url, data, options) => {\r\n        return Api.Request(url, 'GET', data, options)\r\n    }\r\n\r\n    static Post = (url, data, options) => {\r\n        return Api.Request(url, 'POST', data, options)\r\n    }\r\n\r\n    static Request = (url, method, data, config) => {\r\n\r\n        config = config || {}\r\n        \r\n        return new Promise(async (resolve, reject) => {\r\n\r\n            try {\r\n\r\n                const { data: result } = await axios({ method, baseURL, url, data, headers: coconfig.headers })\r\n\r\n                resolve(result)\r\n            }\r\n            catch(error) {\r\n                resolve({error})\r\n            }\r\n        });\r\n    }\r\n\r\n    static GetSaga = function* (url, data, needAuthorization) {\r\n        debugger\r\n        let config = {}\r\n\r\n        if(needAuthorization) {\r\n            const token = yield select(accessTokenSelector)\r\n\r\n            if(!config.headers) {\r\n                config.headers = {}\r\n            }\r\n\r\n            config.headers.authorization = token\r\n        }\r\n\r\n        return yield call(Api.Get, url, data, config)\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}